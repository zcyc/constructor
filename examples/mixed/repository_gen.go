package mixed

import "time"

// Code generated by constructor. DO NOT EDIT.

// NewRepository creates a new Repository
func NewRepository(dsn string, maxConns int, idleTimeout time.Duration, password string) *Repository {
	return &Repository{
		dsn:         dsn,
		maxConns:    maxConns,
		idleTimeout: idleTimeout,
		password:    password,
	}
}

// RepositoryBuilder is a builder for Repository
type RepositoryBuilder struct {
	dsn         string
	maxConns    int
	idleTimeout time.Duration
	password    string
}

// NewRepositoryBuilder creates a new RepositoryBuilder
func NewRepositoryBuilder() *RepositoryBuilder {
	return &RepositoryBuilder{}
}

// Dsn sets the dsn field
func (b *RepositoryBuilder) Dsn(dsn string) *RepositoryBuilder {
	b.dsn = dsn
	return b
}

// MaxConns sets the maxConns field
func (b *RepositoryBuilder) MaxConns(maxConns int) *RepositoryBuilder {
	b.maxConns = maxConns
	return b
}

// IdleTimeout sets the idleTimeout field
func (b *RepositoryBuilder) IdleTimeout(idleTimeout time.Duration) *RepositoryBuilder {
	b.idleTimeout = idleTimeout
	return b
}

// Password sets the password field
func (b *RepositoryBuilder) Password(password string) *RepositoryBuilder {
	b.password = password
	return b
}

// Build builds the Repository
func (b *RepositoryBuilder) Build() *Repository {
	v := &Repository{
		dsn:         b.dsn,
		maxConns:    b.maxConns,
		idleTimeout: b.idleTimeout,
		password:    b.password,
	}
	return v
}

// RepositoryOption is a functional option for configuring Repository
type RepositoryOption func(*Repository)

// WithDsn sets the dsn field
func WithDsn(dsn string) RepositoryOption {
	return func(s *Repository) {
		s.dsn = dsn
	}
}

// WithMaxConns sets the maxConns field
func WithMaxConns(maxConns int) RepositoryOption {
	return func(s *Repository) {
		s.maxConns = maxConns
	}
}

// WithIdleTimeout sets the idleTimeout field
func WithIdleTimeout(idleTimeout time.Duration) RepositoryOption {
	return func(s *Repository) {
		s.idleTimeout = idleTimeout
	}
}

// WithPassword sets the password field
func WithPassword(password string) RepositoryOption {
	return func(s *Repository) {
		s.password = password
	}
}

// NewRepositoryWithOptions creates a new Repository with functional options
func NewRepositoryWithOptions(opts ...RepositoryOption) *Repository {
	v := &Repository{}
	for _, opt := range opts {
		opt(v)
	}
	return v
}

// GetDsn returns the dsn field
func (r *Repository) GetDsn() string {
	return r.dsn
}

// GetMaxConns returns the maxConns field
func (r *Repository) GetMaxConns() int {
	return r.maxConns
}

// GetIdleTimeout returns the idleTimeout field
func (r *Repository) GetIdleTimeout() time.Duration {
	return r.idleTimeout
}

// GetConnCount returns the connCount field
func (r *Repository) GetConnCount() int {
	return r.connCount
}
